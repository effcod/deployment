name: 1. Server Creation

on:
  workflow_dispatch:
    inputs:
      server_name:
        description: 'Name for the Hetzner server'
        required: true
        default: 'kafka-server'
      server_type:
        description: 'Hetzner server type'
        required: true
        default: 'cx22'
      image:
        description: 'Server image'
        required: true
        default: 'ubuntu-24.04'

jobs:
  create-server:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          sudo apt-get install -y sshpass expect
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "All dependencies installed successfully"
  
      - name: Generate SSH key
        id: ssh-key
        run: |
          # Create SSH key name based on server name
          SSH_KEY_NAME="${{ inputs.server_name }}-key"
          echo "SSH_KEY_NAME=$SSH_KEY_NAME" >> $GITHUB_OUTPUT
          
          # Create a directory for SSH keys
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Generate a new SSH key pair without passphrase
          ssh-keygen -t ed25519 -f ~/.ssh/hetzner_key -N "" -C "github-actions-$SSH_KEY_NAME"
          
          # Read and encode the keys for outputs
          echo "PRIVATE_KEY=$(cat ~/.ssh/hetzner_key | base64 -w0)" >> $GITHUB_OUTPUT
          echo "PUBLIC_KEY=$(cat ~/.ssh/hetzner_key.pub)" >> $GITHUB_OUTPUT
          
          # Save keys to disk for the current job
          echo "SSH key pair generated successfully with name: $SSH_KEY_NAME"
          
      - name: Create SSH Key in Hetzner Cloud
        id: create-ssh-key
        env:
          HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
          SSH_KEY_NAME: ${{ steps.ssh-key.outputs.SSH_KEY_NAME }}
          SSH_PUBLIC_KEY: ${{ steps.ssh-key.outputs.PUBLIC_KEY }}
        run: |
          echo "Creating SSH key in Hetzner Cloud with name: $SSH_KEY_NAME"
          python scripts/hetzner/create_ssh_key.py
          echo "SSH key created successfully"
  
      - name: Create Server
        id: create-server
        env:
          HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
          HCLOUD_SERVER_NAME: ${{ inputs.server_name }}
          HCLOUD_SERVER_TYPE: ${{ inputs.server_type }}
          HCLOUD_IMAGE: ${{ inputs.image }}
          HCLOUD_SSH_KEY_NAME: ${{ steps.ssh-key.outputs.SSH_KEY_NAME }}
        run: |
          echo "Creating server with name: $HCLOUD_SERVER_NAME, type: $HCLOUD_SERVER_TYPE, image: $HCLOUD_IMAGE"
          # Execute the create_server script and capture its output variables
          python scripts/hetzner/create_server.py | grep "^SERVER_IP=" >> $GITHUB_OUTPUT
          echo "Server creation completed"
      
      - name: Wait for SSH service
        id: wait-for-ssh
        env:
          SERVER_IP: ${{ steps.create-server.outputs.SERVER_IP }}
        run: |
          echo "Waiting for SSH service to be available on $SERVER_IP..."
          # Wait 10 seconds initially to give server time to boot
          sleep 10
          
          # Try to connect up to 10 times with 15-second intervals
          for i in {1..10}; do
            if nc -z -w5 $SERVER_IP 22; then
              echo "SSH service is now available after attempt $i"
              echo "SSH_READY=true" >> $GITHUB_OUTPUT
              break
            fi
            echo "SSH not available yet (attempt $i/10). Waiting 5 seconds..."
            sleep 5
          done
          
          if ! nc -z -w5 $SERVER_IP 22; then
            echo "SSH service not available after all attempts"
            echo "SSH_READY=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Test SSH connection
        if: steps.wait-for-ssh.outputs.SSH_READY == 'true'
        env:
          SERVER_IP: ${{ steps.create-server.outputs.SERVER_IP }}
          PRIVATE_KEY: ${{ steps.ssh-key.outputs.PRIVATE_KEY }}
        run: |
          # Write the private key to a file
          echo "$PRIVATE_KEY" | base64 -d > ~/.ssh/hetzner_key
          chmod 600 ~/.ssh/hetzner_key
          
          # Test SSH connection
          echo "Testing SSH connection to $SERVER_IP..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/hetzner_key root@$SERVER_IP "echo 'SSH connection successful!'"
          
      - name: Save credentials securely
        env:
          SERVER_IP: ${{ steps.create-server.outputs.SERVER_IP }}
          SSH_PRIVATE_KEY: ${{ steps.ssh-key.outputs.PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ steps.ssh-key.outputs.PUBLIC_KEY }}
          SSH_KEY_NAME: ${{ steps.ssh-key.outputs.SSH_KEY_NAME }}
        run: |
          # Save server details
          echo "SERVER_IP=$SERVER_IP" > server_credentials.txt
          echo "SSH_KEY_NAME=$SSH_KEY_NAME" >> server_credentials.txt
          echo "$SSH_PRIVATE_KEY" | base64 -d > id_hetzner
          chmod 600 id_hetzner
          echo "Credentials saved successfully"
          
      - name: Upload server credentials
        uses: actions/upload-artifact@v4
        with:
          name: server-credentials
          path: |
            server_credentials.txt
            id_hetzner
          retention-days: 1

      - name: Cleanup sensitive data
        if: always()
        run: |
          rm -rf ~/.ssh id_hetzner server_credentials.txt
          echo "Server successfully created"
          ls -la
          

