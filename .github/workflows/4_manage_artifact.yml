name: 4. Managed Artifacts

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform (list/run/kill)'
        required: true
        default: 'list'
        type: choice
        options:
          - list
          - run
          - kill
      version:
        description: 'Artifact version (e.g., 0.0.3) to be deployed'
        required: false
      server_ip:
        description: 'IP address of the target server'
        required: true
      command:
        description: 'Command line args to execute with the artifact'
        required: false
        default: '--command quote_api_to_kafka --kafka_topic quotes --symbol_file_name /opt/symbols/symbols.txt'
      pid:
        description: 'PID of the process to kill (required for kill action)'
        required: false
        default: ''

jobs:
  execute:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Deployment Repo
        uses: actions/checkout@v4

      - name: Configure SSH Key
        env:
          SSH_KEY: ${{ secrets.HETZNER_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_hetzner
          chmod 600 ~/.ssh/id_hetzner
          ssh-keyscan -H "${{ github.event.inputs.server_ip }}" >> ~/.ssh/known_hosts

      - name: Validate version for run action
        if: ${{ github.event.inputs.action == 'run' }}
        run: |
          if [ -z "${{ github.event.inputs.version }}" ]; then
            echo "Error: Version parameter is required for run action" >&2
            exit 1
          fi

      - name: Execute Deployment Script on Remote Host (run)
        if: ${{ github.event.inputs.action == 'run' }}
        run: |
          scp -i ~/.ssh/id_hetzner scripts/python/run_artifact.sh root@${{ github.event.inputs.server_ip }}:/tmp/
          ssh -i ~/.ssh/id_hetzner root@${{ github.event.inputs.server_ip }} <<EOF
          source /root/.env
          chmod +x /tmp/run_artifact.sh
          /tmp/run_artifact.sh "${{ github.event.inputs.version }}" "${{ github.event.inputs.command }}"
          EOF

      - name: List PID Files on Remote Host (list)
        if: ${{ github.event.inputs.action == 'list' }}
        run: |
          ssh -i ~/.ssh/id_hetzner root@${{ github.event.inputs.server_ip }} <<'EOF'
          echo "Listing all PID files in /opt folder:"
          for file in /opt/*.pid; do
            if [ -e "$file" ]; then
              PID=`cat "$file"`
              echo "File: $file: PID:$PID"
            fi
          done
          EOF

      - name: Read Logs (list)
        if: ${{ github.event.inputs.action == 'list' }}
        run: |
          ssh -i ~/.ssh/id_hetzner root@${{ github.event.inputs.server_ip }} <<'EOF'
          echo "===== Reading Log Files ====="
          LOG_FILES=$(find /opt -name "*.log" -type f)
          
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "Filtering logs for version ${{ github.event.inputs.version }}..."
            LOG_FILES=$(echo "$LOG_FILES" | grep "${{ github.event.inputs.version }}" || echo "")
            if [ -z "$LOG_FILES" ]; then
              echo "No log files found for version ${{ github.event.inputs.version }}"
              exit 0
            fi
          fi
          
          # Determine number of lines to display
          LINES_TO_DISPLAY=10
          if [ -n "${{ github.event.inputs.pid }}" ]; then
            LINES_TO_DISPLAY="${{ github.event.inputs.pid }}"
          fi
          
          echo "$LOG_FILES" | while read log_file; do
            echo "===== ===== ===== ===== ===== ===== ===== =====  ====="
            echo "===== Last $LINES_TO_DISPLAY lines of $log_file ====="
            tail -n $LINES_TO_DISPLAY "$log_file"
            echo "===== End of $log_file ====="
            echo "===== ===== ===== ===== ===== ===== ===== =====  ====="
          done
          EOF

      - name: Kill Process on Remote Host (kill)
        if: ${{ github.event.inputs.action == 'kill' }}
        run: |
          if [ -z "${{ github.event.inputs.pid }}" ]; then
            echo "PID input is required for kill action" >&2
            exit 1
          fi

          PID_TO_KILL="${{ github.event.inputs.pid }}"
          ssh -i ~/.ssh/id_hetzner root@${{ github.event.inputs.server_ip }} <<EOF
          PID_FILE="/opt/${PID_TO_KILL}.pid"
          if [ -f "\$PID_FILE" ]; then
            echo "Found PID file \$PID_FILE. Attempting to kill process \$PID_TO_KILL..."
            kill -9 "$PID_TO_KILL"
            echo "Process \$PID_TO_KILL killed."
            rm -f "\$PID_FILE" && echo "Deleted PID file: \$PID_FILE"
          else
            echo "PID file \$PID_FILE not found."
            exit 1
          fi
          EOF

      - name: Cleanup SSH Configuration
        if: always()
        run: rm -rf ~/.ssh
