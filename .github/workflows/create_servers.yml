name: Hetzner Server Creation

on:
  workflow_dispatch:
    inputs:
      server_name:
        description: 'Name for the Hetzner server'
        required: true
        default: 'kafka-server'
      server_type:
        description: 'Hetzner server type'
        required: true
        default: 'cx22'
      image:
        description: 'Server image'
        required: true
        default: 'ubuntu-24.04'

jobs:
  create-server:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          sudo apt-get install -y sshpass expect
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "All dependencies installed successfully"
  
      - name: Create Server
        id: create-server
        env:
          HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
          HCLOUD_SERVER_NAME: ${{ inputs.server_name }}
          HCLOUD_SERVER_TYPE: ${{ inputs.server_type }}
          HCLOUD_IMAGE: ${{ inputs.image }}
        run: |
          echo "Creating server with name: $HCLOUD_SERVER_NAME, type: $HCLOUD_SERVER_TYPE, image: $HCLOUD_IMAGE"
          # Execute the create_server script and capture its output variables
          python scripts/hetzner/create_server.py | grep -E "^SERVER_IP=|^ROOT_PASS=" >> $GITHUB_OUTPUT
          echo "Server creation completed"
      
      - name: Wait for SSH service
        id: wait-for-ssh
        env:
          SERVER_IP: ${{ steps.create-server.outputs.SERVER_IP }}
        run: |
          echo "Waiting for SSH service to be available on $SERVER_IP..."
          # Wait 10 seconds initially to give server time to boot
          sleep 10
          
          # Try to connect up to 10 times with 15-second intervals
          for i in {1..10}; do
            if nc -z -w5 $SERVER_IP 22; then
              echo "SSH service is now available after attempt $i"
              echo "SSH_READY=true" >> $GITHUB_OUTPUT
              break
            fi
            echo "SSH not available yet (attempt $i/10). Waiting 15 seconds..."
            sleep 5
          done
          
          if ! nc -z -w5 $SERVER_IP 22; then
            echo "SSH service not available after all attempts"
            echo "SSH_READY=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Reset Root Password
        id: reset-password
        if: steps.wait-for-ssh.outputs.SSH_READY == 'true'
        env:
          SERVER_IP: ${{ steps.create-server.outputs.SERVER_IP }}
          INITIAL_PASSWORD: ${{ steps.create-server.outputs.ROOT_PASS }}
        run: |
          # Generate a strong random password
          NEW_PASSWORD=$(openssl rand -base64 16)
          echo "Resetting password for root@$SERVER_IP"
          
          # Create expect script to handle password change
          cat > change_password.exp << 'EOF'
          #!/usr/bin/expect -f
          set timeout 60
          set server_ip [lindex $argv 0]
          set old_password [lindex $argv 1]
          set new_password [lindex $argv 2]
          
          spawn ssh -o StrictHostKeyChecking=no root@$server_ip
          expect "password:"
          send "$old_password\r"
          expect "password:"
          send "$new_password\r"
          expect "password:"
          send "$new_password\r"
          expect "#"
          send "exit\r"
          expect eof
          EOF
          
          chmod +x change_password.exp
          ./change_password.exp "$SERVER_IP" "$INITIAL_PASSWORD" "$NEW_PASSWORD"
          
          # Test that the new password works
          if sshpass -p "$NEW_PASSWORD" ssh -o StrictHostKeyChecking=no root@$SERVER_IP "echo 'Password reset successful!'"; then
            echo "Password successfully reset"
            echo "NEW_PASSWORD=$NEW_PASSWORD" >> $GITHUB_OUTPUT
          else
            echo "Failed to reset password"
            exit 1
          fi
      
      - name: Use original password if SSH not ready
        id: use-original-password
        if: steps.wait-for-ssh.outputs.SSH_READY != 'true'
        env:
          INITIAL_PASSWORD: ${{ steps.create-server.outputs.ROOT_PASS }}
        run: |
          echo "SSH service not ready, using original password provided by Hetzner"
          echo "NEW_PASSWORD=$INITIAL_PASSWORD" >> $GITHUB_OUTPUT
      
      - name: Save credentials securely
        env:
          SERVER_IP: ${{ steps.create-server.outputs.SERVER_IP }}
          ROOT_PASS: ${{ steps.reset-password.outputs.NEW_PASSWORD || steps.use-original-password.outputs.NEW_PASSWORD }}
        run: |
          echo "SERVER_IP=$SERVER_IP" > server_credentials.txt
          echo "ROOT_PASS=$ROOT_PASS" >> server_credentials.txt
          echo "Credentials saved successfully"
          
      - name: Upload server credentials
        uses: actions/upload-artifact@v4
        with:
          name: server-credentials
          path: server_credentials.txt
          retention-days: 3
          
      - name: Set server details as outputs
        id: server-details
        run: |
          echo "SERVER_IP=${{ steps.create-server.outputs.SERVER_IP }}" >> $GITHUB_OUTPUT
          echo "SERVER_NAME=${{ inputs.server_name }}" >> $GITHUB_OUTPUT
          
      - name: Post creation message
        run: |
          echo "Server successfully created"
          echo "Server details:"
          echo "  - IP Address: ${{ steps.create-server.outputs.SERVER_IP }}"
          echo "  - Server Name: ${{ inputs.server_name }}"
          echo "  - Server Type: ${{ inputs.server_type }}"
          echo "You can connect to the server with: ssh root@${{ steps.create-server.outputs.SERVER_IP }}"
          echo "The server credentials have been saved as a GitHub artifact named 'server-credentials'"
          echo "Use these credentials with the kafka-installation workflow to install Kafka"
          echo "NOTE: The password has been reset from the initial one provided by Hetzner"
